! Copyright (C) 2018 Leonard Reuter
!
! SPDX-License-Identifier: GPL-3.0-or-later

module genericFilter_tm
    use PFUNIT_MOD
    use kinds_m, only : r8
    use genericFilter_m, only: Std_deviation, Generic_filter
    implicit none

    integer :: i
    real(r8) :: r(7) = [ (i * 1._r8, i = 0,6)]
contains
@Test
    subroutine TestStdDev()
        @assertEqual(2._r8, Std_deviation(r,7))
    end subroutine TestStdDev

@Test
subroutine TestGeneric_filter1()
    real(r8) :: ref(7) = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

    @assertEqual(ref, Generic_filter(r, Std_deviation, 1))
end subroutine TestGeneric_filter1

@Test
subroutine TestGeneric_filter2()
    real(r8) :: ref(7) = [0.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]

    @assertEqual(ref, Generic_filter(r, Std_deviation, 2))
end subroutine TestGeneric_filter2

@Test
subroutine TestGeneric_filter3()
    real(r8), parameter :: a = SQRT(2._r8 / 9._r8)
    real(r8), parameter :: b = SQRT(2._r8 / 3._r8)
    real(r8) :: ref(7) = [a, b, b, b, b, b, a]

    @assertEqual(ref, Generic_filter(r, Std_deviation, 3))
end subroutine TestGeneric_filter3

@Test
subroutine TestGeneric_filter4()
    real(r8) :: ref(7) = [0.5, 0.83, 1.12, 1.12, 1.12, 1.12, 0.83]

    @assertEqual(ref, Generic_filter(r, Std_deviation, 4), tolerance=0.01_r8)
end subroutine TestGeneric_filter4

@Test
subroutine TestGeneric_filter5()
    real(r8) :: ref(7) = [0.75, 1.17, 1.41, 1.41, 1.41, 1.17, 0.75]

    @assertEqual(ref, Generic_filter(r, Std_deviation, 5), tolerance=0.01_r8)
end subroutine TestGeneric_filter5

@Test
subroutine TestGeneric_filter6()
    real(r8) :: ref(7) = [0.82, 1.07, 1.49, 1.71, 1.71, 1.49, 1.07]

    @assertEqual(ref, Generic_filter(r, Std_deviation, 6), tolerance=0.01_r8)
end subroutine TestGeneric_filter6

@Test
subroutine TestGeneric_filter7()
    real(r8) :: ref(7) = [1.03, 1.40, 1.81, 2.0, 1.81, 1.40, 1.03]

    @assertEqual(ref, Generic_filter(r, Std_deviation, 7), tolerance=0.01_r8)
end subroutine TestGeneric_filter7

end module genericFilter_tm
